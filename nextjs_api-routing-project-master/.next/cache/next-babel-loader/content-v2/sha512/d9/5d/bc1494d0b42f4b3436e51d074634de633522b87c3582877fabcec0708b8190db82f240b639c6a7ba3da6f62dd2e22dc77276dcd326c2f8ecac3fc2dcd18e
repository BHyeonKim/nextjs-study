{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/kimbohyeon/NextJS/nextjs_api-routing-project/components/input/comments.js\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState, useContext } from 'react';\nimport CommentList from './comment-list';\nimport NewComment from './new-comment';\nimport classes from './comments.module.css';\nimport NotificationContext from '../../store/notification-context';\n\nfunction Comments(props) {\n  _s();\n\n  var eventId = props.eventId;\n\n  var _useState = useState(false),\n      showComments = _useState[0],\n      setShowComments = _useState[1];\n\n  var _useState2 = useState([]),\n      comments = _useState2[0],\n      setComments = _useState2[1];\n\n  var _useState3 = useState(false),\n      isFetchingComments = _useState3[0],\n      setIsFetchingComments = _useState3[1];\n\n  var notificationCtx = useContext(NotificationContext);\n  useEffect(function () {\n    if (showComments) {\n      setIsFetchingComments(true);\n      fetch(\"/api/comments/\".concat(eventId)).then(function (response) {\n        return response.json();\n      }).then(function (data) {\n        setComments(data.comments);\n        setIsFetchingComments(false);\n      });\n    }\n  }, [showComments]);\n\n  function toggleCommentsHandler() {\n    setShowComments(function (prevStatus) {\n      return !prevStatus;\n    });\n  }\n\n  function addCommentHandler(commentData) {\n    notificationCtx.showNotification({\n      title: 'Sending comment',\n      message: 'Your comment is currently being stored into a database.',\n      status: 'pending'\n    }); // send data to API\n\n    fetch(\"/api/comments/\".concat(eventId), {\n      method: 'POST',\n      body: JSON.stringify(commentData),\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    }).then(function (response) {\n      if (response.ok) {\n        return response.json();\n      }\n\n      return response.json().then(function (data) {\n        throw new Error(data.message || 'Something went wrong!');\n      });\n    }).then(function (data) {\n      notificationCtx.showNotification({\n        title: 'Success!',\n        message: 'Your comment was saved.',\n        status: 'success'\n      });\n    })[\"catch\"](function (error) {\n      notificationCtx.showNotification({\n        title: 'Error!',\n        message: error.message,\n        status: 'error'\n      });\n    });\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    className: classes.comments,\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: toggleCommentsHandler,\n      children: [showComments ? 'Hide' : 'Show', \" Comments\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }, this), showComments && /*#__PURE__*/_jsxDEV(NewComment, {\n      onAddComment: addCommentHandler\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 24\n    }, this), showComments && !isFetchingComments && /*#__PURE__*/_jsxDEV(CommentList, {\n      items: comments\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 47\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 74,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Comments, \"Qfxdqm7BoR9FtwxUjEt9dhfTUWk=\");\n\n_c = Comments;\nexport default Comments;\n\nvar _c;\n\n$RefreshReg$(_c, \"Comments\");","map":{"version":3,"sources":["/Users/kimbohyeon/NextJS/nextjs_api-routing-project/components/input/comments.js"],"names":["useEffect","useState","useContext","CommentList","NewComment","classes","NotificationContext","Comments","props","eventId","showComments","setShowComments","comments","setComments","isFetchingComments","setIsFetchingComments","notificationCtx","fetch","then","response","json","data","toggleCommentsHandler","prevStatus","addCommentHandler","commentData","showNotification","title","message","status","method","body","JSON","stringify","headers","ok","Error","error"],"mappings":";;;;;AAAA,SAASA,SAAT,EAAoBC,QAApB,EAA8BC,UAA9B,QAAgD,OAAhD;AAEA,OAAOC,WAAP,MAAwB,gBAAxB;AACA,OAAOC,UAAP,MAAuB,eAAvB;AACA,OAAOC,OAAP,MAAoB,uBAApB;AACA,OAAOC,mBAAP,MAAgC,kCAAhC;;AAEA,SAASC,QAAT,CAAkBC,KAAlB,EAAyB;AAAA;;AAAA,MACfC,OADe,GACHD,KADG,CACfC,OADe;;AAAA,kBAGiBR,QAAQ,CAAC,KAAD,CAHzB;AAAA,MAGhBS,YAHgB;AAAA,MAGFC,eAHE;;AAAA,mBAISV,QAAQ,CAAC,EAAD,CAJjB;AAAA,MAIhBW,QAJgB;AAAA,MAINC,WAJM;;AAAA,mBAK6BZ,QAAQ,CAAC,KAAD,CALrC;AAAA,MAKhBa,kBALgB;AAAA,MAKIC,qBALJ;;AAOvB,MAAMC,eAAe,GAAGd,UAAU,CAACI,mBAAD,CAAlC;AAEAN,EAAAA,SAAS,CAAC,YAAM;AACd,QAAIU,YAAJ,EAAkB;AAChBK,MAAAA,qBAAqB,CAAC,IAAD,CAArB;AACAE,MAAAA,KAAK,yBAAkBR,OAAlB,EAAL,CACGS,IADH,CACQ,UAACC,QAAD;AAAA,eAAcA,QAAQ,CAACC,IAAT,EAAd;AAAA,OADR,EAEGF,IAFH,CAEQ,UAACG,IAAD,EAAU;AACdR,QAAAA,WAAW,CAACQ,IAAI,CAACT,QAAN,CAAX;AACAG,QAAAA,qBAAqB,CAAC,KAAD,CAArB;AACD,OALH;AAMD;AACF,GAVQ,EAUN,CAACL,YAAD,CAVM,CAAT;;AAYA,WAASY,qBAAT,GAAiC;AAC/BX,IAAAA,eAAe,CAAC,UAACY,UAAD;AAAA,aAAgB,CAACA,UAAjB;AAAA,KAAD,CAAf;AACD;;AAED,WAASC,iBAAT,CAA2BC,WAA3B,EAAwC;AACtCT,IAAAA,eAAe,CAACU,gBAAhB,CAAiC;AAC/BC,MAAAA,KAAK,EAAE,iBADwB;AAE/BC,MAAAA,OAAO,EAAE,yDAFsB;AAG/BC,MAAAA,MAAM,EAAE;AAHuB,KAAjC,EADsC,CAOtC;;AACAZ,IAAAA,KAAK,yBAAkBR,OAAlB,GAA6B;AAChCqB,MAAAA,MAAM,EAAE,MADwB;AAEhCC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeR,WAAf,CAF0B;AAGhCS,MAAAA,OAAO,EAAE;AACP,wBAAgB;AADT;AAHuB,KAA7B,CAAL,CAOGhB,IAPH,CAOQ,UAACC,QAAD,EAAc;AAClB,UAAIA,QAAQ,CAACgB,EAAb,EAAiB;AACf,eAAOhB,QAAQ,CAACC,IAAT,EAAP;AACD;;AAED,aAAOD,QAAQ,CAACC,IAAT,GAAgBF,IAAhB,CAAqB,UAACG,IAAD,EAAU;AACpC,cAAM,IAAIe,KAAJ,CAAUf,IAAI,CAACO,OAAL,IAAgB,uBAA1B,CAAN;AACD,OAFM,CAAP;AAGD,KAfH,EAgBGV,IAhBH,CAgBQ,UAACG,IAAD,EAAU;AACdL,MAAAA,eAAe,CAACU,gBAAhB,CAAiC;AAC/BC,QAAAA,KAAK,EAAE,UADwB;AAE/BC,QAAAA,OAAO,EAAE,yBAFsB;AAG/BC,QAAAA,MAAM,EAAE;AAHuB,OAAjC;AAKD,KAtBH,WAuBS,UAACQ,KAAD,EAAW;AAChBrB,MAAAA,eAAe,CAACU,gBAAhB,CAAiC;AAC/BC,QAAAA,KAAK,EAAE,QADwB;AAE/BC,QAAAA,OAAO,EAAES,KAAK,CAACT,OAFgB;AAG/BC,QAAAA,MAAM,EAAE;AAHuB,OAAjC;AAKD,KA7BH;AA8BD;;AAED,sBACE;AAAS,IAAA,SAAS,EAAExB,OAAO,CAACO,QAA5B;AAAA,4BACE;AAAQ,MAAA,OAAO,EAAEU,qBAAjB;AAAA,iBACGZ,YAAY,GAAG,MAAH,GAAY,MAD3B;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,EAIGA,YAAY,iBAAI,QAAC,UAAD;AAAY,MAAA,YAAY,EAAEc;AAA1B;AAAA;AAAA;AAAA;AAAA,YAJnB,EAKGd,YAAY,IAAI,CAACI,kBAAjB,iBAAuC,QAAC,WAAD;AAAa,MAAA,KAAK,EAAEF;AAApB;AAAA;AAAA;AAAA;AAAA,YAL1C;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AASD;;GA1EQL,Q;;KAAAA,Q;AA4ET,eAAeA,QAAf","sourcesContent":["import { useEffect, useState, useContext } from 'react';\n\nimport CommentList from './comment-list';\nimport NewComment from './new-comment';\nimport classes from './comments.module.css';\nimport NotificationContext from '../../store/notification-context';\n\nfunction Comments(props) {\n  const { eventId } = props;\n\n  const [showComments, setShowComments] = useState(false);\n  const [comments, setComments] = useState([]);\n  const [isFetchingComments, setIsFetchingComments] = useState(false);\n\n  const notificationCtx = useContext(NotificationContext);\n\n  useEffect(() => {\n    if (showComments) {\n      setIsFetchingComments(true);\n      fetch(`/api/comments/${eventId}`)\n        .then((response) => response.json())\n        .then((data) => {\n          setComments(data.comments);\n          setIsFetchingComments(false);\n        });\n    }\n  }, [showComments]);\n\n  function toggleCommentsHandler() {\n    setShowComments((prevStatus) => !prevStatus);\n  }\n\n  function addCommentHandler(commentData) {\n    notificationCtx.showNotification({\n      title: 'Sending comment',\n      message: 'Your comment is currently being stored into a database.',\n      status: 'pending',\n    });\n\n    // send data to API\n    fetch(`/api/comments/${eventId}`, {\n      method: 'POST',\n      body: JSON.stringify(commentData),\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    })\n      .then((response) => {\n        if (response.ok) {\n          return response.json();\n        }\n\n        return response.json().then((data) => {\n          throw new Error(data.message || 'Something went wrong!');\n        });\n      })\n      .then((data) => {\n        notificationCtx.showNotification({\n          title: 'Success!',\n          message: 'Your comment was saved.',\n          status: 'success',\n        });\n      })\n      .catch((error) => {\n        notificationCtx.showNotification({\n          title: 'Error!',\n          message: error.message,\n          status: 'error',\n        });\n      });\n  }\n\n  return (\n    <section className={classes.comments}>\n      <button onClick={toggleCommentsHandler}>\n        {showComments ? 'Hide' : 'Show'} Comments\n      </button>\n      {showComments && <NewComment onAddComment={addCommentHandler} />}\n      {showComments && !isFetchingComments && <CommentList items={comments} />}\n    </section>\n  );\n}\n\nexport default Comments;\n"]},"metadata":{},"sourceType":"module"}