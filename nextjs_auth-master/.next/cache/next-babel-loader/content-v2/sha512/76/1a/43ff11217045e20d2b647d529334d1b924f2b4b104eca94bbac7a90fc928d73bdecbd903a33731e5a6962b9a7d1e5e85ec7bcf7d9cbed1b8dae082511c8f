{"ast":null,"code":"import NextAuth from 'next-auth';\nimport CredentialsProvider from 'next-auth/providers/credentials';\nimport { verifypassword } from '../../../lib/auth';\nimport { connectToDatabase } from '../../../lib/db';\nexport default NextAuth({\n  session: {\n    jwt: true\n  },\n  providers: [CredentialsProvider({\n    async authorize(credentials) {\n      const client = await connectToDatabase();\n      const usersCollection = client.db().collection('users');\n      const user = await usersCollection.findOne({\n        email: credentials.email\n      });\n\n      if (!user) {\n        client.close();\n        throw new Error('No user found!');\n      }\n\n      const isValid = await verifypassword(credentials.password, user.password);\n\n      if (!isValid) {\n        client.close();\n        throw new Error('Could not log you in!');\n      }\n\n      client.close();\n      return {\n        email: user.email\n      };\n    }\n\n  })],\n  secret: process.env.JWT_SECRET\n});","map":{"version":3,"sources":["/Users/kimbohyeon/NextJS/nextjs_auth/pages/api/auth/[...nextauth].js"],"names":["NextAuth","CredentialsProvider","verifypassword","connectToDatabase","session","jwt","providers","authorize","credentials","client","usersCollection","db","collection","user","findOne","email","close","Error","isValid","password","secret","process","env","JWT_SECRET"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,WAArB;AACA,OAAOC,mBAAP,MAAgC,iCAAhC;AACA,SAASC,cAAT,QAA+B,mBAA/B;AACA,SAASC,iBAAT,QAAkC,iBAAlC;AAEA,eAAeH,QAAQ,CAAC;AACtBI,EAAAA,OAAO,EAAE;AAAEC,IAAAA,GAAG,EAAE;AAAP,GADa;AAEtBC,EAAAA,SAAS,EAAE,CACTL,mBAAmB,CAAC;AAClB,UAAMM,SAAN,CAAgBC,WAAhB,EAA6B;AAC3B,YAAMC,MAAM,GAAG,MAAMN,iBAAiB,EAAtC;AAEA,YAAMO,eAAe,GAAGD,MAAM,CAACE,EAAP,GAAYC,UAAZ,CAAuB,OAAvB,CAAxB;AAEA,YAAMC,IAAI,GAAG,MAAMH,eAAe,CAACI,OAAhB,CAAwB;AACzCC,QAAAA,KAAK,EAAEP,WAAW,CAACO;AADsB,OAAxB,CAAnB;;AAIA,UAAI,CAACF,IAAL,EAAW;AACTJ,QAAAA,MAAM,CAACO,KAAP;AACA,cAAM,IAAIC,KAAJ,CAAU,gBAAV,CAAN;AACD;;AAED,YAAMC,OAAO,GAAG,MAAMhB,cAAc,CAClCM,WAAW,CAACW,QADsB,EAElCN,IAAI,CAACM,QAF6B,CAApC;;AAKA,UAAI,CAACD,OAAL,EAAc;AACZT,QAAAA,MAAM,CAACO,KAAP;AACA,cAAM,IAAIC,KAAJ,CAAU,uBAAV,CAAN;AACD;;AAEDR,MAAAA,MAAM,CAACO,KAAP;AACA,aAAO;AAAED,QAAAA,KAAK,EAAEF,IAAI,CAACE;AAAd,OAAP;AACD;;AA3BiB,GAAD,CADV,CAFW;AAiCtBK,EAAAA,MAAM,EAAEC,OAAO,CAACC,GAAR,CAAYC;AAjCE,CAAD,CAAvB","sourcesContent":["import NextAuth from 'next-auth';\nimport CredentialsProvider from 'next-auth/providers/credentials';\nimport { verifypassword } from '../../../lib/auth';\nimport { connectToDatabase } from '../../../lib/db';\n\nexport default NextAuth({\n  session: { jwt: true },\n  providers: [\n    CredentialsProvider({\n      async authorize(credentials) {\n        const client = await connectToDatabase();\n\n        const usersCollection = client.db().collection('users');\n\n        const user = await usersCollection.findOne({\n          email: credentials.email,\n        });\n\n        if (!user) {\n          client.close();\n          throw new Error('No user found!');\n        }\n\n        const isValid = await verifypassword(\n          credentials.password,\n          user.password\n        );\n\n        if (!isValid) {\n          client.close();\n          throw new Error('Could not log you in!');\n        }\n\n        client.close();\n        return { email: user.email };\n      },\n    }),\n  ],\n  secret: process.env.JWT_SECRET,\n});\n"]},"metadata":{},"sourceType":"module"}